<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:redisson="http://redisson.org/schema/redisson"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://redisson.org/schema/redisson http://redisson.org/schema/redisson/redisson.xsd
	">


	<redisson:client id="redisson">
		<redisson:single-server
			idle-connection-timeout="${redis.server.idle.connection.timeout}"
			ping-timeout="${redis.server.ping.timeout}" connect-timeout="${redis.server.connect.timeout}"
			timeout="${redis.server.timeout}" retry-attempts="${redis.server.retry.attempts}"
			retry-interval="${redis.server.retry.interval}" reconnection-timeout="${redis.server.reconnection.timeout}"
			failed-attempts="${redis.server.failed.attempts}"
			subscriptions-per-connection="${redis.server.subscription.per.connection}"
			client-name="${redis.server.client.name}" address="${redis.server.address}"
			subscription-connection-minimum-idle-size="${redis.server.subscription.connection.min.idle.size}"
			subscription-connection-pool-size="${redis.server.subscription.connection.pool.size}"
			connection-minimum-idle-size="${redis.server.connection.min.idle.size}"
			connection-pool-size="${redis.server.connection.pool.size}" database="${redis.server.database.id}"
			password="${redis.server.password}" />
	</redisson:client>

	<util:map id="lmsCachePopulatorMap" map-class="java.util.concurrent.ConcurrentHashMap">
		<entry key="ACCOUNTING_STRUCTURE" value-ref="accountingStructureCachePopulator" />
	</util:map>


	<beans profile="cache-mode-redis">
		<bean id="DEB_CACHE_MANAGER" class="com.nucleus.cache.NeutrinoCacheManagerRedis">
			<constructor-arg index="0" ref="redisson" />
			<constructor-arg index="1" value="5" />
			<constructor-arg index="2" value="3" />
			<constructor-arg index="3" value="5" />
			<constructor-arg index="4" value="3" />
			<constructor-arg index="5" value="20" />
		</bean>

		<bean id="lmsCacheRegion" class="com.nucleus.cache.NeutrinoCacheRegion"
			depends-on="DEB_CACHE_MANAGER,lmsCachePopulatorMap">
			<constructor-arg ref="lmsCachePopulatorMap" />
			<constructor-arg ref="DEB_CACHE_MANAGER" />
		</bean>
	</beans>

	<beans profile="cache-mode-infinispan">
		<bean id="DEB_CACHE_MANAGER" class="com.nucleus.cache.NeutrinoCacheManagerInfinispan" />

		<bean id="lmsCacheRegion" class="com.nucleus.cache.NeutrinoCacheRegionInfinispan"
			depends-on="DEB_CACHE_MANAGER,lmsCachePopulatorMap">
			<constructor-arg ref="lmsCachePopulatorMap" />
			<constructor-arg ref="DEB_CACHE_MANAGER" />
			<constructor-arg value="neutrino-infinispan-fw-cache.xml" />
		</bean>
	</beans>

</beans>
